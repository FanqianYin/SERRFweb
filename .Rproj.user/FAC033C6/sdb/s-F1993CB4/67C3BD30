{
    "collab_server" : "",
    "contents" : "checkDataFormat = function(input = \"C:\\\\Users\\\\Sili Fan\\\\Downloads\\\\Constanze-Urine-HILIC-ForNorm_2.xlsx\"){\n\nreadData = function(path =  \"G:\\\\data\\\\D\\\\data project D.xlsx\"){\n\n  #check if it is csv of xlsx\n  if(grepl(\"xlsx\", path)){\n    d <- openxlsx::read.xlsx(path, sheet = 1,colNames = FALSE)\n  }else if(grepl(\"csv\", path)){\n    # file = \"C:\\\\Users\\\\Sili Fan\\\\Downloads\\\\val (18).csv\"\n    d <- data.table::fread(path)\n  }\n\n  # make \"\" as NA\n  d[d==\"\"] <- NA\n\n  #### fData\n  fData <- d[!is.na(d[,1]),c(which(is.na(d[1,])),sum(is.na(d[1,]))+1)] # The first row and column is critical of formating the data.\n  colnames(fData) = as.character(fData[1,]); fData = data.frame(fData[-1,],stringsAsFactors = F,check.names = FALSE);rownames(fData) = 1:nrow(fData);\n  # following steps keeps the column type.\n  fData.=lapply(fData,function(x){\n    if(sum(!is.na(as.numeric(x))) == length(x)){\n      as.numeric(x)\n    }else{\n      x\n    }\n  })\n  fData. = do.call(cbind, lapply(fData., data.frame, stringsAsFactors=FALSE))\n  colnames(fData.) = colnames(fData)\n  fData = fData.\n\n  fData = fData[,c(ncol(fData),2:ncol(fData)-1)]\n  fData[[1]] = make.unique(fData[[1]], sep = '_')\n\n  #### pData\n  pData <- d[c(which(is.na(d[,1])),max(which(is.na(d[,1])))+1) ,!is.na(d[1,])]\n  pData <- t(pData); colnames(pData) = pData[1,]; pData = data.frame(pData[-1,],stringsAsFactors = F,check.names = FALSE)\n  # following steps keeps the column type.\n  pData.=lapply(pData,function(x){\n    if(sum(!is.na(as.numeric(x))) == length(x)){\n      as.numeric(x)\n    }else{\n      x\n    }\n  })\n  pData. = do.call(cbind, lapply(pData., data.frame, stringsAsFactors=FALSE))\n  colnames(pData.) = colnames(pData)\n  pData = pData.\n\n  pData = pData[,c(ncol(pData),2:ncol(pData)-1)]\n  pData[[1]] = make.unique(make.names(pData[[1]]), sep = '_')\n\n  #### eData\n  eData <- d[!is.na(d[,1]),!is.na(d[1,])][-1,-1]\n  eData <- sapply(eData, as.numeric)\n  eData <- data.frame(eData,stringsAsFactors = F)\n  colnames(eData) = pData[[1]]; rownames(eData) = fData[[1]]\n\n  # # remove any unwanted character in columns of eData, fData and pData to _.\n  # colnames(eData) = gsub(\"([_])|[[:punct:]]\", \"_\", colnames(eData))\n  # colnames(fData) = gsub(\"([_])|[[:punct:]]\", \"_\", colnames(fData))\n  # colnames(pData) = gsub(\"([_])|[[:punct:]]\", \"_\", colnames(pData))\n\n  # remove all the NA. And replace NA with \"NA\" Otherwise DataTables will give error.datatables warning requested unknown parameter\n  # eData[is.na(eData)]=\"NA\"\n  # fData[is.na(fData)]=\"NA\"\n  # pData[is.na(pData)]=\"NA\"\n\n  # remove unwanted character in p.\n  # for(i in 1:nrow(pData)){\n  #   for(j in 1:ncol(pData)){\n  #     pData[i,j] = gsub(\"\\\\+|~|-\", \" \", pData[i,j])\n  #   }\n  # }\n\n  return(list(e = eData, f = fData, p = pData))\n\n}\n\n\n\n  data = readData(input)\n\n  e = data$e\n  p = data$p\n  f = data$f\n\n  if(nrow(f)>2000){\n    stop(\"Dear respected user, we appologize that we can only take at most 2000 compounds due to computing power issue. Please feel free to contact me at slfan2013@ucdavis.edu for a personalized normalization service.\")\n  }\n\n  if(!\"label\"%in%names(p)){\n    stop(\"no label\")\n  }\n  if(!\"batch\"%in%names(p)){\n    stop(\"no batch\")\n  }\n  if(!\"type\"%in%names(p)){\n    stop(\"no type\")\n  }\n  if(!\"time\"%in%names(p)){\n    stop(\"no time\")\n  }\n\n\n  if(!\"QC\"%in%unique(p$type)){\n    stop(\"no QC\")\n  }\n  if(!\"validate\"%in%unique(p$type)){\n    stop(\"no validate\")\n  }\n  if(!\"Sample\"%in%unique(p$type)){\n    stop(\"no Sample\")\n  }\n\n  if(!class(p$time) == \"numeric\"){\n    stop(\"time is not a right format. Must be number (numeric).\")\n  }\n\n  if(any(table(p$batch[p$type==\"QC\"])<8)){\n    stop(\"Some batch has too little QCs. At least 8 QC needed.\")\n  }\n\n\n  return(list(e = data$e, f = data$f, p = data$p))\n\n}\n",
    "created" : 1505501518278.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "2|64|76|0|\n",
    "hash" : "3822838764",
    "id" : "67C3BD30",
    "lastKnownWriteTime" : 1505937018,
    "last_content_update" : 1505937018743,
    "path" : "~/GitHub/SERRFweb/R/checkDataFormat.R",
    "project_path" : "R/checkDataFormat.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}